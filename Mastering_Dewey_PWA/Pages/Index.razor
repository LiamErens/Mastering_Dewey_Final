@page "/"
@using Blazor.DragDrop.Core
@using Mastering_Dewey_PWA.Components
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject AppState AppState


<style type="text/css">
    .incorrect-item {
        border: 2px solid red; /* Add a red border to highlight incorrect items */
    }

    .title-image {
        height: auto;
        width: 280px;
    }

    .dropList {
        border: 5px solid white;
        padding: 7px;
        background: @ConsoleColor.Black;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 420px;
    }

    .numberList1 {
        border: 5px solid white;
        padding: 7px;
        background: @ConsoleColor.Gray;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 80px;
    }

    .numberList2 {
        border: 5px solid white;
        padding: 7px;
        background: #ADD8E6;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 80px;
    }

    .numberList3 {
        border: 5px solid white;
        padding: 7px;
        background: #800080;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 80px;
    }

    .numberList4 {
        border: 5px solid white;
        padding: 7px;
        background: #008620;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 80px;
    }

    .numberList5 {
        border: 5px solid white;
        padding: 7px;
        background: #FFA500;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 80px;
    }

    .numberList6 {
        border: 5px solid white;
        padding: 7px;
        background: #66CDAA;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 80px;
    }

    .numberList7 {
        border: 5px solid white;
        padding: 7px;
        background: #151B54;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 80px;
    }

    .numberList8 {
        border: 5px solid white;
        padding: 7px;
        background: #E2F516;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 80px;
    }

    .numberList9 {
        border: 5px solid white;
        padding: 7px;
        background: #F67280;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 80px;
    }

    .numberList10 {
        border: 5px solid white;
        padding: 7px;
        background: #C19A6B;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 16px;
        text-align: center;
        width: 80px;
    }

    .draggable-item {
        transition: transform 0.3s; /* Add transition for smooth animation */
    }

        .draggable-item:hover {
            transform: scale(1.1); /* Increase size on hover */
        }

</style>

<h1 class="text-center mb-4"><img src="/testyourknowledge.png" class="title-image" /></h1>

<div class="container ">
    <div class="row">
        <div class="col-md-3">
            <ul class="list-group">
                <li class="list-group-item numberList1">000</li>
            </ul>
            <ul class="list-group">
                <li class="list-group-item numberList2">100</li>
            </ul>
            <ul class="list-group">
                <li class="list-group-item numberList3">200</li>
            </ul>
            <ul class="list-group">
                <li class="list-group-item numberList4">300</li>
            </ul>
            <ul class="list-group">
                <li class="list-group-item numberList5">400</li>
            </ul>
            <ul class="list-group">
                <li class="list-group-item numberList6">500</li>
            </ul>
            <ul class="list-group">
                <li class="list-group-item numberList7">600</li>
            </ul>
            <ul class="list-group">
                <li class="list-group-item numberList8">700</li>
            </ul>
            <ul class="list-group">
                <li class="list-group-item numberList9">800</li>
            </ul>
            <ul class="list-group">
                <li class="list-group-item numberList10">900</li>
            </ul>
        </div>
        <div class="col-md-6">
            <Dropzone>
                @for (int i = 1; i <= 10; i++)
                {
                    var randomCategory = GetRandomCategory();
                    if (!string.IsNullOrEmpty(randomCategory))
                    {
                        <div>
                            <Draggable>
                                <li class="list-group-item dropList draggable-item @(incorrectItems.Contains(randomCategory) ? "incorrect-item" : "")">@randomCategory</li>
                            </Draggable>
                        </div>
                    }
                }
            </Dropzone>

        </div>

    </div>
</div>
<br />
<button class="btn btn-primary" style="background-color: green; margin-left: 410px" @onclick="CheckPositions">CHECK ME!</button>
<br />
<br />
<br />
@if (response == "correct")
{
    <div class="alert alert-success" role="alert">
        +5 points!!
    </div>
}
else if (response == "incorrect")
{
    <div class="alert alert-danger" role="alert">
        Incorrect!
    </div>
}



@code {
    bool isCorrect;
    string response;
    LinkedList<string> categories = new LinkedList<string>();
    LinkedList<string> usedCategories = new LinkedList<string>();
    LinkedList<string> expectedOrder = new LinkedList<string>();
    LinkedList<string> actualOrder = new LinkedList<string>();
    List<string> incorrectItems = new List<string>();
    Random rand = new Random();
    private bool isInitialized = false;


    private void PopulateCategories()
    {
        categories.AddLast("General Knowledge");
        categories.AddLast("Philosophy & Psychology");
        categories.AddLast("Religion");
        categories.AddLast("Social Sciences");
        categories.AddLast("Languages");
        categories.AddLast("Science");
        categories.AddLast("Technology");
        categories.AddLast("Arts & Recreation");
        categories.AddLast("Literature");
        categories.AddLast("History & Geography");
    }

    private void PopulateExpectedOrder()
    {
        expectedOrder.AddLast("General Knowledge");
        expectedOrder.AddLast("Philosophy & Psychology");
        expectedOrder.AddLast("Religion");
        expectedOrder.AddLast("Social Sciences");
        expectedOrder.AddLast("Languages");
        expectedOrder.AddLast("Science");
        expectedOrder.AddLast("Technology");
        expectedOrder.AddLast("Arts & Recreation");
        expectedOrder.AddLast("Literature");
        expectedOrder.AddLast("History & Geography");
    }


    private string GetRandomCategory()
    {
        if (categories.Count > 0)
        {
            int index = rand.Next(categories.Count);
            var node = categories.First;
            for (int i = 0; i < index; i++)
            {
                node = node.Next;
            }
            string randomCategory = node.Value;
            usedCategories.AddLast(randomCategory);
            categories.Remove(node);
            return randomCategory;
        }
        return string.Empty;
    }


    private async Task<List<string>> GetActualOrder()
    {
        return await JSRuntime.InvokeAsync<List<string>>("blazorCheckPositions");
    }


    private async Task CheckPositions()
    {
        List<string> actualOrder = await JSRuntime.InvokeAsync<List<string>>("blazorCheckPositions");

        isCorrect = Enumerable.SequenceEqual(actualOrder, expectedOrder);

        if (isCorrect)
        {
            response = "correct";
            AppState.HasPassedFirstTest = true;
            NavigationManager.NavigateTo("Counter");
        }
        else
        {
            response = "incorrect";
            AppState.HasPassedFirstTest = false;

            // Identify incorrect items and add them to the list
            incorrectItems = actualOrder.Except(expectedOrder).ToList();
        }
    }

    // Initialize the linked lists when the component is initialized
    protected override void OnInitialized()
    {
        if (!isInitialized)
        {
            PopulateCategories();
            PopulateExpectedOrder();
            isInitialized = true;
        }
        base.OnInitialized();
    }
}

