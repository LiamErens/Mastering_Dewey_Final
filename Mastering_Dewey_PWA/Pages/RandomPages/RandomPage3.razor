@page "/RandomPage3"
@using Blazor.DragDrop.Core
@using Mastering_Dewey_PWA.Components
@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager
@inject AppState AppState

<style type="text/css">
    .incorrect-item {
        border: 2px solid red; /* Add a red border to highlight incorrect items */
    }

    .title-image {
        height: auto;
        width: 280px;
    }

    html, body {
        height: 100%;
        margin: 0;
        background-image: linear-gradient(to bottom right, #CCCCFF, #DCD0FF);
    }

    .dropList {
        border: 5px solid #DCD0FF;
        padding: 7px;
        background: @ConsoleColor.Black;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 420px;
    }

    .numberList1 {
        border: 5px solid #CCCCFF;
        padding: 7px;
        background: @ConsoleColor.Gray;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 240px;
    }

    .numberList2 {
        border: 5px solid #CCCCFF;
        padding: 7px;
        background: #ADD8E6;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 240px;
    }

    .numberList3 {
        border: 5px solid #CCCCFF;
        padding: 7px;
        background: #800080;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 240px;
    }

    .numberList4 {
        border: 5px solid #CCCCFF;
        padding: 7px;
        background: #008620;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 240px;
    }

    .numberList5 {
        border: 5px solid #CCCCFF;
        padding: 7px;
        background: #FFA500;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 240px;
    }

    .numberList6 {
        border: 5px solid #CCCCFF;
        padding: 7px;
        background: #66CDAA;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 240px;
    }

    .numberList7 {
        border: 5px solid #CCCCFF;
        padding: 7px;
        background: #151B54;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 240px;
    }

    .numberList8 {
        border: 5px solid #CCCCFF;
        padding: 7px;
        background: #E2F516;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 240px;
    }

    .numberList9 {
        border: 5px solid #CCCCFF;
        padding: 7px;
        background: #F67280;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 14px;
        text-align: center;
        width: 240px;
    }

    .numberList10 {
        border: 5px solid #CCCCFF;
        padding: 7px;
        background: #C19A6B;
        color: @ConsoleColor.White;
        height: 40px;
        font-size: 16px;
        text-align: center;
        width: 240px;
    }

    .draggable-item {
        transition: transform 0.3s;
    }

        .draggable-item:hover {
            transform: scale(1.1);
        }

</style>

@if (AppState.HasPassedFirstTest)
{
    <h1 class="text-center mb-4"><img src="/match-the-column.png" class="title-image" /></h1>
    <br />
    <div class="container ">
        <div class="row">
            <div class="col-md-3">
                <ul class="list-group">
                    <li class="list-group-item numberList6">500</li>
                </ul>
                <ul class="list-group">
                    <li class="list-group-item numberList1">000</li>
                </ul>
                <ul class="list-group">
                    <li class="list-group-item numberList3">200</li>
                </ul>
                <ul class="list-group">
                    <li class="list-group-item numberList9">800</li>
                </ul>
            </div>
            <div class="col-md-6">
                <Dropzone>
                    @for (int i = 1; i <= 7; i++)
                    {
                        var randomCategory = GetRandomCategory();
                        if (!string.IsNullOrEmpty(randomCategory))
                        {
                            <div>
                                <Draggable>
                                    <li class="list-group-item dropList draggable-item">@randomCategory</li>
                                </Draggable>
                            </div>
                        }
                    }
                </Dropzone>

            </div>

        </div>
    </div>
    <br />
    <button class="btn btn-primary" style="background-color: green; margin-left: 410px" @onclick="CheckPositions">@answer</button>

    @if (response == "correct")
    {
        <div class="alert alert-success" role="alert" style="margin-left: 500px">
            +5 points!!
        </div>
    }
    else if (response == "incorrect")
    {
        answer = "Try again!";
    }
}
else
{
    <h1 class="" style="text-align: center; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;font-size: 24px;margin-top: 100px;">Please complete the first quiz.</h1>
}

@code {
    string answer = "CHECK ME!";
    bool isCorrect;
    string response;
    Dictionary<string, bool> categories = new Dictionary<string, bool>();
    List<string> usedCategories = new List<string>();
    List<string> expectedOrder = new List<string>();
    List<string> actualOrder = new List<string>();
    Random rand = new Random();
    private bool isInitialized = false;

    private void PopulateCategories()
    {

        categories["Science"] = false; //500
        categories["General Knowledge"] = false; //000
        categories["Religion"] = false; //200
        categories["Literature"] = false; //800
        categories["History & Geography"] = false; //900
        categories["Technology"] = false; //600
        categories["Philosophy & Psychology"] = false; //100
        //categories["Social Sciences"] = false; //300
        //categories["Languages"] = false; //400
        //categories["Arts & Recreation"] = false; //700
    }

    private void PopulateExpectedOrder()
    {
        expectedOrder.AddRange(new List<string> {
            "Science",
            "General Knowledge",
            "Religion",
            "Literature",
            "History & Geography",
            "Technology",
            "Philosophy & Psychology"
            //"Social Sciences",
            //"Languages",
            //"Arts & Recreation"
        });
    }

    private string GetRandomCategory()
    {
        if (categories.Count > 0)
        {
            List<string> keys = categories.Keys.ToList();
            int index = rand.Next(keys.Count);
            string randomCategory = keys[index];
            usedCategories.Add(randomCategory);
            categories.Remove(randomCategory);
            return randomCategory;
        }
        return string.Empty;
    }

    private async Task<List<string>> GetActualOrder()
    {
        return await JSRuntime.InvokeAsync<List<string>>("blazorCheckPositions");
    }

    private async Task CheckPositions()
    {
        List<string> actualOrder = await GetActualOrder();

        // Compare only the first four items
        var actualFirstFour = actualOrder.Take(4).ToList();
        var expectedFirstFour = expectedOrder.Take(4).ToList();

        isCorrect = Enumerable.SequenceEqual(actualFirstFour, expectedFirstFour);

        if (isCorrect)
        {
            response = "correct";
            AppState.UserPoints += 5;
            NavigationManager.NavigateTo("FetchData");
            AppState.CorrectQuizzes++; // Increment correct quiz counter
        }
        else
        {
            // The order is incorrect
            response = "incorrect";
            AppState.IncorrectQuizzes++; // Increment incorrect quiz counter
        }
    }

    // Initialize the linked lists when the component is initialized
    protected override void OnInitialized()
    {
        if (!isInitialized)
        {
            PopulateCategories();
            PopulateExpectedOrder();
            AppState.HasPassedFirstTest = true;
            isInitialized = true;
        }
        base.OnInitialized();
    }
}

